plugins {
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'org.reactfx'

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testImplementation group: 'org.junit.contrib', name: 'junit-theories', version: '4.12'
    testImplementation group: 'com.pholser', name: 'junit-quickcheck-core', version: '0.4'
    testImplementation group: 'com.pholser', name: 'junit-quickcheck-generators', version: '0.4'
}

javafx {
    version = "18"
    modules = ['javafx.controls', 'javafx.swing']
}

javadoc {
    // ignore missing Javadoc comments or tags
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
    
    // resolve links to Java and JavaFX Javadocs
    options.links = [
        'http://docs.oracle.com/javase/8/docs/api/',
        'http://docs.oracle.com/javase/8/javafx/api/'
    ]
}

tasks.register('javadocJar', Jar) {
    dependsOn tasks.named('javadoc')
    archiveClassifier.set('javadoc')
    from 'build/docs/javadoc'
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        ReactFX(MavenPublication) {
            from components.java

            groupId = 'org.reactfx'
            artifactId = 'reactfx'
            version = '2.0'

            pom.withXml {
                asNode().appendNode('packaging', 'jar')
            }

            pom {
                name = 'ReactFX'
                description = 'Reactive event streams for JavaFX'
                url = 'http://www.reactfx.org/'
                packaging 'jar'
                licenses {
                    license {
                        name = 'The BSD 2-Clause License'
                        url = 'http://opensource.org/licenses/BSD-2-Clause'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'scm:git@github.com:TomasMikula/ReactFX.git'
                    connection = 'scm:git@github.com:TomasMikula/ReactFX.git'
                    developerConnection = 'scm:git@github.com:TomasMikula/ReactFX.git'
                }
                developers {
                    developer {
                        name = 'Tomas Mikula'
                    }
                }
            }
        }
    }
}

def isSnapshot = version.endsWith("-SNAPSHOT")
repositories {
    maven {
        name = "ReactFX"
        url = uri(isSnapshot ? "https://oss.sonatype.org/content/repositories/snapshots"
                             : "https://oss.sonatype.org/service/local/staging/deploy/maven2/")
        credentials {
            username = project.findProperty('sonatypeUsername')
            password = project.findProperty('sonatypePassword')
        }
    }
}

def doUploadArchives = project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
tasks.withType(PublishToMavenRepository).configureEach {
    onlyIf { doUploadArchives }
}

signing {
    sign configurations.archives
    sign publishing.publications.ReactFX
}

signArchives.onlyIf {
    project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')
}